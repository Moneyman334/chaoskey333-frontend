require("dotenv").config();
const { ethers } = require("ethers");
const axios = require("axios");
const fs = require("fs");
const FormData = require("form-data");

const CONTRACT_ABI = require("../artifacts/YourContract.json").abi; // Replace with your ABI
const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS;
const PINATA_API_KEY = process.env.PINATA_API_KEY;
const PINATA_SECRET_API_KEY = process.env.PINATA_SECRET_API_KEY;

// ‚öôÔ∏è Set up provider & wallet
const provider = new ethers.providers.JsonRpcProvider(process.env.INFURA_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, wallet);

// üß¨ Metadata (Customize this)
const metadata = {
  name: "Frankenstein Relic 333",
  description: "‚ö° Resurrected from the Vault ‚Äì ChaosKey333",
  image: "https://frankenstein333.33.amazonaws.com/relic.jpg",
  attributes: [
    { trait_type: "Power", value: "Vault Surge" },
    { trait_type: "Rank", value: "VIP Eternal" }
  ]
};

// üì¶ Upload metadata to IPFS via Pinata
async function uploadToIPFS(metadata) {
  const jsonData = JSON.stringify(metadata);
  const data = new FormData();
  data.append("file", Buffer.from(jsonData), "metadata.json");

  const res = await axios.post("https://api.pinata.cloud/pinning/pinFileToIPFS", data, {
    maxBodyLength: Infinity,
    headers: {
      ...data.getHeaders(),
      pinata_api_key: PINATA_API_KEY,
      pinata_secret_api_key: PINATA_SECRET_API_KEY,
    }
  });

  return `https://gateway.pinata.cloud/ipfs/${res.data.IpfsHash}`;
}

// üíé Mint function
async function mintRelic() {
  try {
    console.log("üöÄ Uploading metadata to IPFS...");
    const tokenURI = await uploadToIPFS(metadata);
    console.log("‚úÖ Metadata uploaded:", tokenURI);

    console.log("‚ö° Minting to wallet:", wallet.address);
    const tx = await contract.mint(wallet.address, tokenURI);
    await tx.wait();

    console.log("üéâ Relic Minted! Tx Hash:", tx.hash);
  } catch (error) {
    console.error("‚ùå Error during minting:", error.message);
  }
}

mintRelic();