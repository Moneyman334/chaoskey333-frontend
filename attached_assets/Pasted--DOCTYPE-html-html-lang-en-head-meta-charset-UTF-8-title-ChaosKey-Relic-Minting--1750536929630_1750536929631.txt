<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>ChaosKey Relic Minting</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <script src="https://js.stripe.com/v3/"></script>
</head>
<body>

  <!-- üîò Mint Trigger Button -->
  <button onclick="createStripeCheckoutSession()">Mint ChaosKey Relic</button>

  <script>
    const stripe = Stripe("pk_live_YOUR_PUBLIC_KEY"); // ‚õ≥Ô∏è Replace with your live public Stripe key

    async function createStripeCheckoutSession() {
      if (!window.ethereum) {
        alert("‚ö†Ô∏è MetaMask not detected.");
        return;
      }

      try {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        const walletAddress = accounts[0];

        const response = await fetch('/api/create-checkout-session', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            walletAddress,
            connectedWalletType: 'MetaMask',
            amount: 33300,
            currency: 'usd',
            productName: 'ChaosKey333 Relic Mint'
          }),
        });

        const session = await response.json();
        if (session.sessionId) {
          await stripe.redirectToCheckout({ sessionId: session.sessionId });
        } else {
          alert('‚ùå Failed to create checkout session.');
        }
      } catch (error) {
        console.error('‚ö†Ô∏è Stripe Error:', error);
        alert('Checkout failed.');
      }
    }

    async function mintRelic() {
      const contractAddress = "0xYourDeployedGoerliAddress"; // üß¨ Replace with your deployed Goerli contract
      const abi = [{
        "inputs": [],
        "name": "mintRelic",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }];

      try {
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = provider.getSigner();
        const contract = new ethers.Contract(contractAddress, abi, signer);
        const tx = await contract.mintRelic();
        await tx.wait();
        alert("‚úÖ Relic minted successfully!");
      } catch (err) {
        console.error("‚ùå Mint error:", err);
        alert("Relic mint failed.");
      }
    }

    // üöÄ Auto-mint when redirected from Stripe
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get("success") === "true") {
      window.addEventListener('load', mintRelic); // üß† Important: triggers auto mint on success
    }
  </script>
</body>
</html>
